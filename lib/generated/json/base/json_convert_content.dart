// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:open_m3u8_player/data/live_host_list_entity.dart';
import 'package:open_m3u8_player/generated/json/live_host_list_entity_helper.dart';
import 'package:open_m3u8_player/data/live_type_list_entity.dart';
import 'package:open_m3u8_player/generated/json/live_type_list_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case LiveHostListEntity:
				return liveHostListEntityFromJson(data as LiveHostListEntity, json) as T;
			case LiveHostListZhubo:
				return liveHostListZhuboFromJson(data as LiveHostListZhubo, json) as T;
			case LiveTypeListEntity:
				return liveTypeListEntityFromJson(data as LiveTypeListEntity, json) as T;
			case LiveTypeListPingtai:
				return liveTypeListPingtaiFromJson(data as LiveTypeListPingtai, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case LiveHostListEntity:
				return liveHostListEntityToJson(data as LiveHostListEntity);
			case LiveHostListZhubo:
				return liveHostListZhuboToJson(data as LiveHostListZhubo);
			case LiveTypeListEntity:
				return liveTypeListEntityToJson(data as LiveTypeListEntity);
			case LiveTypeListPingtai:
				return liveTypeListPingtaiToJson(data as LiveTypeListPingtai);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (LiveHostListEntity).toString()){
			return LiveHostListEntity().fromJson(json);
		}
		if(type == (LiveHostListZhubo).toString()){
			return LiveHostListZhubo().fromJson(json);
		}
		if(type == (LiveTypeListEntity).toString()){
			return LiveTypeListEntity().fromJson(json);
		}
		if(type == (LiveTypeListPingtai).toString()){
			return LiveTypeListPingtai().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<LiveHostListEntity>[] is M){
			return data.map<LiveHostListEntity>((e) => LiveHostListEntity().fromJson(e)).toList() as M;
		}
		if(<LiveHostListZhubo>[] is M){
			return data.map<LiveHostListZhubo>((e) => LiveHostListZhubo().fromJson(e)).toList() as M;
		}
		if(<LiveTypeListEntity>[] is M){
			return data.map<LiveTypeListEntity>((e) => LiveTypeListEntity().fromJson(e)).toList() as M;
		}
		if(<LiveTypeListPingtai>[] is M){
			return data.map<LiveTypeListPingtai>((e) => LiveTypeListPingtai().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}
